plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.4'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'com.diffplug.spotless' version '6.25.0'
  id 'checkstyle'
  id 'pmd'
}

group = 'com.lottery'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

spotless {
  java {
    importOrder 'java', 'javax', 'org', 'com'
    removeUnusedImports()
    googleJavaFormat('1.17.0')
    target 'src/**/*.java'
    targetExclude('build/**', '**/generated/**')
  }
  format 'misc', {
    target '*.gradle', '*.md', '.gitignore'
    trimTrailingWhitespace()
    endWithNewline()
    indentWithSpaces(2)
  }
}

checkstyle {
  toolVersion = '10.17.0'
  configFile = file('config/checkstyle/checkstyle.xml')
  configProperties = [
          'checkstyle.suppressions.file': file('config/checkstyle/suppressions.xml').absolutePath,
          'charset': 'UTF-8'
  ]
  ignoreFailures = true
}
tasks.withType(Checkstyle).configureEach {
  reports {
    xml.required = true
    html.required = true
  }
}

pmd {
  toolVersion = '6.55.0'
  ruleSets = [] // 기본 ruleset 끄고
  ruleSetFiles = files('config/pmd/pmd-ruleset.xml') // 최소 커스텀만
  ignoreFailures = true
}
tasks.withType(Pmd).configureEach {
  reports {
    xml.required = true
    html.required = true
  }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  compileOnly 'org.projectlombok:lombok'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.mysql:mysql-connector-j'
  annotationProcessor 'org.projectlombok:lombok'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  pmd "net.sourceforge.pmd:pmd-java:6.55.0"

  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
  runtimeOnly 'com.h2database:h2'
  /* 내장 DB로 임시 사용하기 위해 의존성 추가 */
}

tasks.named('test') {
  useJUnitPlatform()
}

// Spotless를 'check' 파이프라인에 강제 연결한다.
// - 효과: ./gradlew check (CI 포함) 실행 시 포맷 검증(spotlessCheck)도 반드시 수행됨
// - 이 상태에서 포맷 불일치가 있으면 빌드 실패 → ./gradlew spotlessApply 로 자동 고침 후 재시도
// - 리포맷 전용 PR을 이미 머지한 뒤에 켜는 게 권장(대규모 diff 방지)
// - 다중 모듈이라면 각 서브프로젝트에도 Spotless가 적용되어 있어야 함(plugins/spotless 설정 확인)
 tasks.named('check') { dependsOn 'spotlessCheck' }
