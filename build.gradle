plugins {
  id 'java'
  id 'org.springframework.boot' version '3.4.4'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'com.diffplug.spotless' version '6.25.0'
  id 'checkstyle'
  id 'pmd'
}

group = 'com.lottery'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

/* -------- Spotless (format owner) -------- */
spotless {
  java {
    importOrder 'java', 'javax', 'org', 'com'
    removeUnusedImports()
    googleJavaFormat('1.17.0')
    target 'src/**/*.java'
    targetExclude('build/**', '**/generated/**')
  }
  format 'misc', {
    target '*.gradle', '*.md', '.gitignore'
    trimTrailingWhitespace()
    endWithNewline()
    indentWithSpaces(2)
  }
}

/* -------- Checkstyle (report by default) -------- */
checkstyle {
  toolVersion = '10.17.0'
  configFile = file('config/checkstyle/checkstyle.xml')
  configProperties = [
          'checkstyle.suppressions.file': file('config/checkstyle/suppressions.xml').absolutePath,
          'charset'                      : 'UTF-8'
  ]
  ignoreFailures = true
}

/* -------- PMD (report by default) -------- */
pmd {
  toolVersion = '6.55.0'
  ruleSets = [] // 기본 ruleset off
  ruleSetFiles = files('config/pmd/pmd-ruleset.xml')
  ignoreFailures = true
}

/* =========================================================
   Changed-files gate wiring
   - CI에서 -DchangedFiles=path1,path2,... 로 주입
   - 값이 있으면 해당 파일만 검사 + 실패 가드 ON
   - 없으면 전체 리포트(비강제)
   ========================================================= */
def changedFilesProp = System.getProperty('changedFiles') ?: ''
def changedJavaFiles = changedFilesProp
        .split(',')
        .collect { it.trim() }
        .findAll { it && it.endsWith('.java') }
        .collect { file(it) }
        .findAll { it.exists() }

tasks.withType(Checkstyle).configureEach { t ->
  if (!changedJavaFiles.isEmpty()) {
    t.source = files(changedJavaFiles)
    t.ignoreFailures = false     // 변경 파일 있을 때 실패 가드
  } else {
    t.ignoreFailures = true      // 변경 없으면 리포트만
  }
  t.reports {
    xml.required = true
    html.required = true
  }
}

tasks.withType(Pmd).configureEach { t ->
  if (!changedJavaFiles.isEmpty()) {
    t.source = files(changedJavaFiles)
    t.ignoreFailures = false
  } else {
    t.ignoreFailures = true
  }
  t.reports {
    xml.required = true
    html.required = true
  }
}

/* -------- Dependencies -------- */
dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'com.h2database:h2' // 임시 내장 DB

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.security:spring-security-test'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

  // pmd-java 런타임 의존성 (플러그인이 알아서 받는 경우도 있으나 명시해둠)
  pmd "net.sourceforge.pmd:pmd-java:6.55.0"
}

/* -------- Tests -------- */
tasks.named('test') {
  useJUnitPlatform()
}

/* -------- Ensure spotlessCheck is part of 'check' pipeline -------- */
tasks.named('check') {
  dependsOn 'spotlessCheck'
}
